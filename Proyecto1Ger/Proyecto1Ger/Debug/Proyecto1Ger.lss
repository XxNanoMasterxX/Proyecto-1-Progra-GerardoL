
AVRASM ver. 2.2.8  C:\Users\laloj\Documents\Proyecto-1-Progra\Proyecto1Ger\Proyecto1Ger\main.asm Sun Mar 16 20:54:37 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\laloj\Documents\Proyecto-1-Progra\Proyecto1Ger\Proyecto1Ger\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328Pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\laloj\Documents\Proyecto-1-Progra\Proyecto1Ger\Proyecto1Ger\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Proyecto1Ger.asm
                                 ;
                                 ; Created: 3/4/2025 2:32:10 PM
                                 ; Author : laloj
                                 ;
                                 
                                 .include "M328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 .org 0x0100
000100                           DigSelect: .byte 1
000101                           MedioS: .byte 1
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 c021                      rjmp SETUP_GEN
                                 .org PCI0addr
000006 940c 01cf                 jmp PIN_CHANGE
                                 .org OVF2addr
000012 940c 017e                 jmp DISP_LGC
                                 .org OVF0addr //Timer0, Overfloq
000020 940c 0077                 jmp SW_CNT
                                 
                                 
                                 
                                 SETUP_GEN:
000022 94f8                      	cli
000023 e008                      	ldi r16, HIGH(RAMEND)
000024 bf0e                      	out SPH, R16
000025 ef0f                      	ldi R16, LOW(RAMEND)
000026 bf0d                      	out spl, r16
                                 
000027 063f
000028 4f5b
000029 6d66
00002a 077d
00002b 677f
00002c 7c77
00002d 5e39
00002e 7179                      	tab7seg: .DB 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6D, 0x7D, 0x07, 0x7f, 0x67, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71
                                 
                                 
                                 ; Setup del clock0
00002f e800                      	ldi r16, (1 << CLKPCE)
000030 9300 0061                 	sts CLKPR, r16 //Hora de prescaler hermano
000032 e004                      	ldi r16, 0b00000100
000033 9300 0061                 	sts CLKPR, r16 // Asi es viejo, prescaler F_cpu = 1MHz
                                 
000035 940e 01c3                 	call in_tim0
000037 940e 01c8                 	call in_tim2
                                 
000039 e001                      	ldi r16, 0x01
00003a 9300 006e                 	sts TIMSK0, r16
00003c 9300 0070                 	sts TIMSK2, r16
                                 
00003e e001                      	ldi r16, 0x01
00003f 9300 0068                 	sts PCICR, R16
000041 e10f                      	ldi r16, 0b00011111
000042 9300 006b                 	sts PCMSK0, r16
                                 
000044 e4ee                      	LDI ZL, LOW(tab7seg<<1)
000045 e0f0                      	LDI ZH, HIGH(tab7seg<<1)
000046 9114                      	LPM R17, Z // Se carga el valor inicial de z hacia el port, este siendo 0.
000047 2e21                      	MOV R2, R17
000048 2e31                      	MOV R3, R17
000049 2e41                      	MOV R4, R17
00004a 2e51                      	MOV R5, R17
00004b 2ea1                      	MOV R10, R17
00004c 2ec1                      	MOV R12, R17
                                 
00004d e000                      	ldi r16, 0x00
00004e b904                      	out ddrb, r16
00004f 9a38                      	sbi DDRC, 0
000050 9a39                      	sbi DDRC, 1
000051 9a3a                      	sbi DDRC, 2
000052 9a3b                      	sbi DDRC, 3
000053 ef0f                      	ldi r16, 0xff
000054 b905                      	out portb, r16
000055 b90a                      	out ddrd, r16
000056 9a40                      	sbi portc, 0
000057 9841                      	cbi portc, 1
000058 9842                      	cbi portc, 2
000059 9843                      	cbi portc, 3
                                 
00005a e800                      	ldi r16, 0b10000000
00005b 2e60                      	mov r6, r16
00005c e006                      	ldi r16, 0x06
00005d 2e90                      	mov r9, r16
00005e 2eb0                      	mov r11, r16
00005f e001                      	ldi r16, 0x01
000060 9300 0100                 	sts DigSelect, r16
000062 e020                      	ldi r18, 0x00
000063 9320 0101                 	sts MedioS, r18
000065 e030                      	ldi r19, 0x00
000066 e040                      	ldi r20, 0x00
000067 e050                      	ldi r21, 0x00 ; Minuto
000068 e060                      	ldi r22, 0x00 ; Dec_Minuto
000069 e070                      	ldi r23, 0x00 ; Hora
00006a e080                      	ldi r24, 0x00 ; Dec_Hora
00006b e090                      	ldi r25, 0x00
00006c e0a1                      	ldi r26, 0x01 ; Dia
00006d e0b0                      	ldi r27, 0x00 ; Dec_Dia
00006e e0c1                      	ldi r28, 0x01 ; Mes
00006f e0d0                      	ldi r29, 0x00 ; Decima de Mes
000070 2e79                      	mov r7, r25
000071 2e89                      	mov r8, r25
000072 2ee0                      	mov r14, r16
000073 2ef9                      	mov r15, r25
000074 9478                      	sei
                                 
                                 loop:
000075 940c 0075                 	jmp loop
                                 
                                 SW_CNT:
000077 eb22                      	ldi r18, 178
000078 bd26                      	out TCNT0, r18
000079 9533                      	inc r19
00007a 3634                      	cpi r19, 100
00007b f439                      	brne segundos
00007c 92ff                      	push r15
00007d 24ff                      	clr r15
00007e 94f3                      	inc r15
00007f 92f0 0101                 	sts MedioS, r15
000081 24ff                      	clr r15
000082 90ff                      	pop r15
                                 	segundos:
000083 3c38                      	cpi r19, 200 ; Segundo
000084 f571                      	brne escape
000085 92ff                      	push r15
000086 24ff                      	clr r15
000087 92f0 0101                 	sts MedioS, r15
000089 90ff                      	pop r15
00008a 2733                      	clr r19
00008b 9543                      	inc r20
00008c 334c                      	cpi r20, 60 ; Minutos
00008d f529                      	brne escape
                                 
00008e 6091                      	sbr r25, 1
00008f 2744                      	clr r20
000090 9553                      	inc r21
000091 305a                      	cpi r21, 10 ; Decimas de minutos
000092 f501                      	brne escape
                                 
000093 6092                      	sbr r25, 2
000094 2755                      	clr r21
000095 9563                      	inc r22
000096 3066                      	cpi r22, 6 ; Horas
000097 f4d9                      	brne escape
                                 
000098 3082                      	cpi r24, 2
000099 f051                      	breq hora2
00009a 6094                      	sbr r25, 4
00009b 2766                      	clr r22
00009c 9573                      	inc r23
00009d 307a                      	cpi r23, 10 ; Decimas de horas
00009e f4a1                      	brne escape
                                 
00009f 6098                      	sbr r25, 8
0000a0 2777                      	clr r23
0000a1 9583                      	inc r24
0000a2 940c 012a                 	jmp Disp_Select
                                 	hora2:
0000a4 6094                      	sbr r25, 4
0000a5 2766                      	clr r22
0000a6 9573                      	inc r23
0000a7 3074                      	cpi r23, 4 ; Decimas de horas
0000a8 f451                      	brne escape
                                 	// Dia y Mes increase
0000a9 6098                      	sbr r25, 8
0000aa 6190                      	sbr r25, 16
0000ab 2777                      	clr r23
0000ac 2788                      	clr r24
0000ad fdc3                      	sbrc r28, 3 ; Check de mes
0000ae c045                      	rjmp Mes_Alto
0000af fdd0                      	sbrc r29, 0
0000b0 c043                      	rjmp Mes_Alto
0000b1 940c 00b5                 	jmp Mes_bajo
                                 
                                 			escape:
0000b3 940c 012a                 			jmp Disp_Select
                                 
                                 	Mes_bajo:
0000b5 fdc0                      	sbrc r28, 0
0000b6 c029                      	rjmp bajo_impar
                                 	; meses bajos, pares
0000b7 30c2                      		cpi r28, 0x02
0000b8 f0a1                      		breq febrero
                                 		; Meses pares que no son febrero
0000b9 30b3                      		cpi r27, 3
0000ba f041                      		breq Month_Inc_Pl
0000bb 95a3                      		inc r26
0000bc 30aa                      		cpi r26, 10
0000bd f7a9                      		brne escape
0000be 27aa                      		clr r26
0000bf 95b3                      		inc r27
0000c0 6290                      		sbr r25, 32
0000c1 940c 012a                 		jmp Disp_Select
                                 
                                 			
                                 
                                 		Month_Inc_Pl:
0000c3 95a3                      		inc r26
0000c4 30a1                      		cpi r26, 1
0000c5 f769                      		brne escape
0000c6 e0a1                      		ldi r26, 0x01
0000c7 27bb                      		clr r27
0000c8 95c3                      		inc r28
0000c9 6290                      		sbr r25, 32
0000ca 6490                      		sbr r25, 64
0000cb 940c 012a                 		jmp Disp_Select
                                 
                                 		febrero:
0000cd 95a3                      		inc r26
0000ce 30b2                      		cpi r27, 2
0000cf f039                      		breq feb_fini
0000d0 30aa                      		cpi r26, 10
0000d1 f709                      		brne escape
0000d2 27aa                      		clr r26
0000d3 95b3                      		inc r27
0000d4 6290                      		sbr r25, 32
0000d5 30b2                      		cpi r27, 2
0000d6 f6e1                      		brne escape
                                 		feb_fini:
0000d7 30a9                      		cpi r26, 9
0000d8 f6d1                      		brne escape
0000d9 e0a1                      		ldi r26, 0x01
0000da 27bb                      		clr r27
0000db 95c3                      		inc r28
0000dc 6290                      		sbr r25, 32
0000dd 6490                      		sbr r25, 64
0000de 940c 012a                 		jmp Disp_Select
                                 
                                 	bajo_impar:
0000e0 30b3                      		cpi r27, 3
0000e1 f041                      		breq Month_Inc_Il
0000e2 95a3                      		inc r26
0000e3 30aa                      		cpi r26, 10
0000e4 f671                      		brne escape
0000e5 27aa                      		clr r26
0000e6 95b3                      		inc r27
0000e7 6290                      		sbr r25, 32
0000e8 30ba                      		cpi r27, 10
0000e9 f649                      		brne escape
                                 
                                 
                                 		Month_Inc_Il:
0000ea 95a3                      		inc r26
0000eb 30a2                      		cpi r26, 2
0000ec f5e9                      		brne Disp_Select
0000ed e0a1                      		ldi r26, 0x01
0000ee 27bb                      		clr r27
0000ef 95c3                      		inc r28
0000f0 6290                      		sbr r25, 32
0000f1 6490                      		sbr r25, 64
0000f2 940c 012a                 		jmp Disp_Select
                                 
                                 
                                 	
                                 
                                 	Mes_Alto:
0000f4 fdc0                      	sbrc r28, 0
0000f5 c01b                      	rjmp alto_impar
0000f6 30b3                      	cpi r27, 3
0000f7 f041                      		breq Month_Inc_Ph
0000f8 95a3                      		inc r26
0000f9 30aa                      		cpi r26, 10
0000fa f579                      		brne Disp_Select
0000fb 27aa                      		clr r26
0000fc 95b3                      		inc r27
0000fd 6290                      		sbr r25, 32
0000fe 30ba                      		cpi r27, 10
0000ff f551                      		brne Disp_Select
                                 
                                 
                                 		Month_Inc_Ph:
000100 95a3                      		inc r26
000101 30a2                      		cpi r26, 2
000102 f539                      		brne Disp_Select
000103 e0a1                      		ldi r26, 0x01
000104 27bb                      		clr r27
000105 95c3                      		inc r28
000106 6290                      		sbr r25, 32
000107 6490                      		sbr r25, 64
000108 30d1                      		cpi r29, 0x01
000109 f501                      		brne Disp_Select
00010a 30c3                      		cpi r28, 0x03
00010b f4f1                      		brne Disp_Select
00010c 27dd                      		clr r29
00010d e0c1                      		ldi r28, 0x01
00010e 6890                      		sbr r25, 128
00010f 940c 012a                 		jmp Disp_Select
                                 
                                 	alto_impar:
000111 30b3                      	cpi r27, 3
000112 f041                      		breq Month_Inc_Ih
000113 95a3                      		inc r26
000114 30aa                      		cpi r26, 10
000115 f4a1                      		brne Disp_Select
000116 27aa                      		clr r26
000117 95b3                      		inc r27
000118 6290                      		sbr r25, 32
000119 30ba                      		cpi r27, 10
00011a f479                      		brne Disp_Select
                                 
                                 
                                 		Month_Inc_Ih:
00011b 95a3                      		inc r26
00011c 30a1                      		cpi r26, 1
00011d f461                      		brne Disp_Select
00011e e0a1                      		ldi r26, 0x01
00011f 27bb                      		clr r27
000120 95c3                      		inc r28
000121 6290                      		sbr r25, 32
000122 6490                      		sbr r25, 64
000123 30ca                      		cpi r28, 10
000124 f429                      		brne Disp_Select
000125 27cc                      		clr r28
000126 95d3                      		inc r29
000127 6890                      		sbr r25, 128
000128 940c 012a                 		jmp Disp_Select
                                 
                                 	
                                 	
                                 
                                 Disp_Select:
00012a e011                      	ldi r17, 0x01
00012b 16e1                      	cp r14, r17
00012c f029                      	breq DM_1
00012d e012                      	ldi r17, 0x02
00012e 16e1                      	cp r14, r17
00012f f089                      	breq DM_2
000130 940c 0150                 	jmp options
                                 	
                                 	DM_1:
000132 9488                      	clc
000133 1f00                      	rol r16 ;Cambio de selector
000134 3100                      	cpi r16, 0x10
000135 f409                      	brne fini1
000136 e001                      	ldi r16, 0x01
                                 	fini1:
000137 fd00                      	sbrc r16, 0
000138 b82b                      	out portd, r2
000139 fd01                      	sbrc r16, 1
00013a b83b                      	out portd, r3
00013b fd02                      	sbrc r16, 2
00013c b84b                      	out portd, r4
00013d fd03                      	sbrc r16, 3
00013e b85b                      	out portd, r5
00013f b908                      	out portc, r16
000140 9518                      	reti
                                 
                                 	DM_2:
000141 9488                      	clc
000142 1f00                      	rol r16 ;Cambio de selector
000143 3100                      	cpi r16, 0x10
000144 f409                      	brne fini2
000145 e001                      	ldi r16, 0x01
                                 	fini2:
000146 fd00                      	sbrc r16, 0
000147 b89b                      	out portd, r9
000148 fd01                      	sbrc r16, 1
000149 b8ab                      	out portd, r10
00014a fd02                      	sbrc r16, 2
00014b b8bb                      	out portd, r11
00014c fd03                      	sbrc r16, 3
00014d b8cb                      	out portd, r12
00014e b908                      	out portc, r16
00014f 9518                      	reti
                                 
                                 	options:
000150 e014                      	ldi r17, 0x04
000151 16e1                      	cp r14, r17
000152 f019                      	breq DM_3
000153 e018                      	ldi r17, 0x08
000154 16e1                      	cp r14, r17
000155 f139                      	breq DM_4
                                 
                                 	DM_3:
000156 932f                      	push r18
000157 9120 0101                 	lds r18, MedioS
000159 ff20                      	sbrs r18, 0
00015a 940c 016c                 	jmp cancel1
00015c 9488                      	clc
00015d 1f00                      	rol r16 ;Cambio de selector
00015e 3100                      	cpi r16, 0x10
00015f f409                      	brne fini3
000160 e001                      	ldi r16, 0x01
                                 	fini3:
000161 fd00                      	sbrc r16, 0
000162 b82b                      	out portd, r2
000163 fd01                      	sbrc r16, 1
000164 b83b                      	out portd, r3
000165 fd02                      	sbrc r16, 2
000166 b84b                      	out portd, r4
000167 fd03                      	sbrc r16, 3
000168 b85b                      	out portd, r5
000169 b908                      	out portc, r16
00016a 912f                      	pop r18
00016b 9518                      	reti
                                 	cancel1:
00016c e020                      	ldi r18, 0x00
00016d 9488                      	clc
00016e 1f00                      	rol r16 ;Cambio de selector
00016f 3100                      	cpi r16, 0x10
000170 f409                      	brne fini4
000171 e001                      	ldi r16, 0x01
                                 	fini4:
000172 fd00                      	sbrc r16, 0
000173 b92b                      	out portd, r18
000174 fd01                      	sbrc r16, 1
000175 b92b                      	out portd, r18
000176 fd02                      	sbrc r16, 2
000177 b92b                      	out portd, r18
000178 fd03                      	sbrc r16, 3
000179 b92b                      	out portd, r18
00017a b908                      	out portc, r16
00017b 912f                      	pop r18
00017c 9518                      	reti
                                 
                                 
                                 	DM_4:
00017d 9518                      	reti
                                 
                                 
                                 DISP_LGC:
                                 
                                 
                                 	M_1:
00017e 931f                      		push r17
00017f ff90                      		sbrs r25, 0
000180 940c 0187                 		jmp dec_min
000182 2e75                      		mov r7, r21
000183 940e 026f                 		call table_loop
000185 2e21                      		mov r2, r17
000186 7f9e                      		cbr r25, 1
                                 		dec_min:
000187 ff91                      		sbrs r25, 1
000188 940c 018f                 		jmp hora
00018a 2e76                      		mov r7, r22
00018b 940e 026f                 		call table_loop
00018d 2e31                      		mov r3, r17
00018e 7f9d                      		cbr r25, 2
                                 		hora:
00018f ff92                      		sbrs r25, 2
000190 940c 0197                 		jmp dec_hora
000192 2e77                      		mov r7, r23
000193 940e 026f                 		call table_loop
000195 2e41                      		mov r4, r17
000196 7f9b                      		cbr r25, 4
                                 		dec_hora:
000197 ff93                      		sbrs r25, 3
000198 940c 019f                 		jmp dia
00019a 2e78                      		mov r7, r24
00019b 940e 026f                 		call table_loop
00019d 2e51                      		mov r5, r17
00019e 7f97                      		cbr r25, 8
                                 
                                 		dia:
00019f ff94                      		sbrs r25, 4
0001a0 940c 01a7                 		jmp dec_dia
0001a2 2e7a                      		mov r7, r26
0001a3 940e 026f                 		call table_loop
0001a5 2e91                      		mov r9, r17
0001a6 7e9f                      		cbr r25, 16
                                 
                                 		dec_dia:
0001a7 ff95                      		sbrs r25, 5
0001a8 940c 01af                 		jmp mes
0001aa 2e7b                      		mov r7, r27
0001ab 940e 026f                 		call table_loop
0001ad 2ea1                      		mov r10, r17
0001ae 7d9f                      		cbr r25, 32
                                 
                                 		mes:
0001af ff96                      		sbrs r25, 6
0001b0 940c 01b7                 		jmp dec_mes
0001b2 2e7c                      		mov r7, r28
0001b3 940e 026f                 		call table_loop
0001b5 2eb1                      		mov r11, r17
0001b6 7b9f                      		cbr r25, 64
                                 
                                 		dec_mes:
0001b7 ff97                      		sbrs r25, 7
0001b8 940c 01c1                 		jmp disp_fini
0001ba 2e7d                      		mov r7, r29
0001bb 940e 026f                 		call table_loop
0001bd 2ec1                      		mov r12, r17
0001be 7b9f                      		cbr r25, 64
                                 
0001bf 940c 01c1                 		jmp disp_fini
                                 
                                 	disp_fini:
0001c1 911f                      	pop r17
0001c2 9518                      	reti
                                 	
                                 	
                                 
                                 in_tim0:
0001c3 e003                      	LDI R16, (1<<CS01) | (1<<CS00)
0001c4 bd05                      	OUT TCCR0B, R16 // Setear prescaler del TIMER 0 a 64
0001c5 eb02                      	LDI R16, 178
0001c6 bd06                      	OUT TCNT0, R16 // Cargar valor inicial en TCNT0
0001c7 9508                      	RET
                                 
                                 in_tim2:
0001c8 e004                      	ldi r16, 0x04
0001c9 9300 00b1                 	sts TCCR2B, r16
0001cb e604                      	ldi r16, 100
0001cc 9300 00b2                 	sts TCNT2, r16
0001ce 9508                      	ret
                                 PIN_CHANGE:
0001cf 930f                      	push r16
0001d0 931f                      	push r17
                                 
0001d1 b103                      	in r16, pinb
0001d2 ff00                      	sbrs r16, 0
0001d3 c00b                      	rjmp B_1
0001d4 ff01                      	sbrs r16, 1
0001d5 c00a                      	rjmp B_Up
0001d6 ff02                      	sbrs r16, 2
0001d7 c043                      	rjmp B_Down
0001d8 ff03                      	sbrs r16, 3
0001d9 c074                      	rjmp B_DigChange
0001da ff04                      	sbrs r16, 4
0001db c08a                      	rjmp M_CHANGE
                                 
                                 	salir:
0001dc 911f                      	pop r17
0001dd 910f                      	pop r16
0001de 9518                      	reti
                                 
                                 
                                 	B_1:
0001df cffc                      	rjmp salir
                                 
                                 	B_Up:
0001e0 fce0                      		sbrc r14, 0
0001e1 940c 01dc                 		jmp salir
0001e3 fce1                      		sbrc r14, 1
0001e4 940c 01dc                 		jmp salir
0001e6 fce2                      		sbrc r14, 2
0001e7 940c 01ec                 		jmp HM_Up
0001e9 fce3                      		sbrc r14, 3
0001ea 940c 0217                 		jmp F_Up
                                 
                                 		HM_Up:
0001ec 932f                      		push r18
0001ed 9120 0100                 		lds r18, DigSelect
0001ef fd20                      		sbrc r18, 0
0001f0 940c 01f4                 		jmp M_Up
0001f2 940c 0201                 		jmp H_Up
                                 
                                 			M_Up:
0001f4 912f                      			pop r18
0001f5 6091                      			sbr r25, 1
0001f6 9553                      			inc r21
0001f7 305a                      			cpi r21, 10
0001f8 f719                      			brne salir
0001f9 6092                      			sbr r25, 2
0001fa 2755                      			clr r21
0001fb 9563                      			inc r22
0001fc 3066                      			cpi r22, 6
0001fd f6f1                      			brne salir
0001fe 2766                      			clr r22
0001ff 940c 01dc                 			jmp salir
                                 
                                 			H_Up:
000201 912f                      			pop r18
000202 6094                      			sbr r25, 4
000203 9573                      			inc r23
000204 3082                      			cpi r24, 2
000205 f051                      			breq H_Up_High
000206 307a                      			cpi r23, 10
000207 f6a1                      			brne salir
000208 6098                      			sbr r25, 8
000209 2777                      			clr r23
00020a 9583                      			inc r24
00020b 3086                      			cpi r24, 6
00020c f679                      			brne salir
00020d 2788                      			clr r24
00020e 940c 01dc                 			jmp salir
                                 			H_Up_High:
000210 3074                      			cpi r23, 4
000211 f651                      			brne salir
000212 6098                      			sbr r25, 8
000213 2777                      			clr r23
000214 2788                      			clr r24
000215 940c 01dc                 			jmp salir
                                 
                                 		F_Up:
000217 940c 01dc                 		jmp salir
                                 
                                 				escapeB:
000219 940c 01dc                 				jmp salir
                                 	B_Down:
00021b fce0                      	sbrc r14, 0
00021c 940c 01dc                 		jmp salir
00021e fce1                      		sbrc r14, 1
00021f 940c 01dc                 		jmp salir
000221 fce2                      		sbrc r14, 2
000222 940c 0227                 		jmp HM_Down
000224 fce3                      		sbrc r14, 3
000225 940c 024c                 		jmp F_Down
                                 
                                 		HM_Down:
000227 932f                      		push r18
000228 9120 0100                 		lds r18, DigSelect
00022a fd20                      		sbrc r18, 0
00022b 940c 022f                 		jmp M_Down
00022d 940c 023c                 		jmp H_Down
                                 
                                 			M_Down:
00022f 912f                      			pop r18
000230 6091                      			sbr r25, 1
000231 955a                      			dec r21
000232 3f5f                      			cpi r21, 0xff
000233 f729                      			brne escapeB
000234 6092                      			sbr r25, 2
000235 e059                      			ldi r21, 0x09
000236 956a                      			dec r22
000237 3f6f                      			cpi r22, 0xff
000238 f701                      			brne escapeB
000239 e065                      			ldi r22, 0x05
00023a 940c 01dc                 			jmp salir
                                 
                                 			H_Down:
00023c 912f                      			pop r18
00023d 6094                      			sbr r25, 4
00023e 957a                      			dec r23
00023f 3f7f                      			cpi r23, 0xff
000240 f6c1                      			brne escapeB
000241 6098                      			sbr r25, 8
000242 958a                      			dec r24
000243 3f8f                      			cpi r24, 0xff
000244 f019                      			breq H_Down_High
000245 e079                      			ldi r23, 0x09
000246 940c 01dc                 			jmp salir
                                 			H_Down_High:
000248 e082                      			ldi r24, 0x02
000249 e073                      			ldi r23, 0x03
00024a 940c 01dc                 			jmp salir
                                 			
                                 
                                 		F_Down:
00024c 940c 01dc                 		jmp salir
                                 
                                 	B_DigChange:
00024e fce0                      		sbrc r14, 0
00024f 940c 01dc                 		jmp salir
000251 fce1                      		sbrc r14, 1
000252 940c 01dc                 		jmp salir
000254 fce2                      		sbrc r14, 2
000255 940c 025a                 		jmp DigChange
000257 fce3                      		sbrc r14, 3
000258 940c 025a                 		jmp DigChange
                                 
                                 		DigChange:
00025a 932f                      		push r18
00025b 9120 0100                 		lds r18, DigSelect
00025d 0f22                      		lsl r18
00025e fd23                      		sbrc r18, 3
00025f e021                      		ldi r18, 0x01
000260 9320 0100                 		sts DigSelect, r18
000262 912f                      		pop r18
000263 940c 01dc                 		jmp salir
                                 
                                 
                                 
000265 cf76                      	rjmp salir
                                 
                                     M_CHANGE:
000266 0cee                      		lsl r14
000267 fce4                      		sbrc r14, 4
000268 940c 026c                 		jmp modreset
00026a 940c 01dc                 		jmp salir
                                 		modreset:
00026c e011                      		ldi r17, 0x01
00026d 2ee1                      		mov r14, r17
00026e cf6d                      		rjmp salir
                                 	
                                 
                                 table_loop:
00026f e4ee                      	LDI ZL, LOW(tab7seg<<1)
000270 e0f0                      	LDI ZH, HIGH(tab7seg<<1)
                                 table_loop1:
000271 1478                      	cp r7, r8
000272 f021                      	breq tab_fini
000273 9483                      	inc r8
000274 9631                      	adiw Z, 1
000275 940c 0271                 	jmp table_loop1
                                 	tab_fini:
000277 9114                      	lpm r17, z
000278 2488                      	clr r8
000279 9508                      	ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   0 r1 :   0 r2 :   4 r3 :   4 r4 :   4 
r5 :   4 r6 :   1 r7 :  10 r8 :   4 r9 :   3 r10:   3 r11:   3 r12:   3 
r13:   0 r14:  20 r15:  11 r16:  76 r17:  30 r18:  31 r19:   5 r20:   4 
r21:  11 r22:  12 r23:  17 r24:  13 r25:  53 r26:  31 r27:  21 r28:  15 
r29:   6 r30:   2 r31:   2 
Registers used: 30 out of 35 (85.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   1 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  14 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  36 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  10 cbi   :   3 cbr   :   8 
clc   :   4 clh   :   0 cli   :   1 cln   :   0 clr   :  30 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 cpc   :   0 
cpi   :  45 cpse  :   0 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :  33 jmp   :  53 
ld    :   0 ldd   :   0 ldi   :  55 lds   :   4 lpm   :   4 lsl   :   2 
lsr   :   0 mov   :  30 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  28 pop   :  12 
push  :   9 rcall :   0 ret   :   3 reti  :   7 rjmp  :  13 rol   :   4 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :  33 sbrc  :  36 sbrs  :  14 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  13 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 33 out of 113 (29.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004f4   1198     16   1214   32768   3.7%
[.dseg] 0x000100 0x000102      0      2      2    2048   0.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
